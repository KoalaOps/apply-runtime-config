name: 'Apply Runtime Config'
description: 'Apply runtime configuration overrides to environment files'
author: 'KoalaOps'

branding:
  icon: 'settings'
  color: 'purple'

inputs:
  working_directory:
    description: 'Working directory'
    required: false
    default: '.'
  config:
    description: 'Runtime config (base64 encoded JSON or plain JSON)'
    required: true
  overlay_dir:
    description: 'Overlay directory containing .env files'
    required: false
  env_file:
    description: 'Specific env file to update'
    required: false
    default: '.env'

outputs:
  config_json:
    description: 'Decoded configuration as JSON'
    value: ${{ steps.decode.outputs.config }}
  updated_files:
    description: 'List of updated files'
    value: ${{ steps.apply.outputs.files }}

runs:
  using: 'composite'
  steps:
    - name: Decode configuration
      id: decode
      shell: bash
      run: |
        CONFIG='${{ inputs.config }}'
        
        # Check if it's base64 encoded
        if echo "$CONFIG" | base64 -d >/dev/null 2>&1; then
          echo "=æ Decoding base64 configuration..."
          DECODED=$(echo "$CONFIG" | base64 -d)
        else
          echo "=Ë Using plain JSON configuration..."
          DECODED="$CONFIG"
        fi
        
        # Validate JSON
        if ! echo "$DECODED" | jq empty 2>/dev/null; then
          echo "::error::Invalid JSON configuration"
          echo "$DECODED"
          exit 1
        fi
        
        # Output decoded config
        echo "config<<EOF" >> $GITHUB_OUTPUT
        echo "$DECODED" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
        
        echo " Configuration validated"
    
    - name: Apply with npx extend-env-files
      if: inputs.overlay_dir != ''
      shell: bash
      working-directory: ${{ inputs.working_directory }}
      env:
        ENV_FILES_CONFIG: ${{ steps.decode.outputs.config }}
      run: |
        echo "=' Applying configuration with extend-env-files..."
        npx extend-env-files
        echo " Configuration applied"
    
    - name: Apply to specific file
      id: apply
      if: inputs.overlay_dir == ''
      shell: bash
      working-directory: ${{ inputs.working_directory }}
      run: |
        echo "=' Applying configuration to ${{ inputs.env_file }}..."
        
        CONFIG='${{ steps.decode.outputs.config }}'
        ENV_FILE="${{ inputs.env_file }}"
        
        # Create env file if it doesn't exist
        touch "$ENV_FILE"
        
        # Apply each key-value pair
        echo "$CONFIG" | jq -r 'to_entries[] | "\(.key)=\(.value)"' | while IFS='=' read -r key value; do
          # Remove existing key if present
          sed -i.bak "/^$key=/d" "$ENV_FILE" && rm "${ENV_FILE}.bak" || true
          
          # Add new value
          echo "$key=$value" >> "$ENV_FILE"
          echo "  Set: $key"
        done
        
        echo "files=$ENV_FILE" >> $GITHUB_OUTPUT
        echo " Configuration applied to $ENV_FILE"
    
    - name: Show changes
      shell: bash
      working-directory: ${{ inputs.working_directory }}
      run: |
        echo "=Ý Configuration changes:"
        echo "${{ steps.decode.outputs.config }}" | jq -r 'to_entries[] | "  \(.key) = \(.value)"'